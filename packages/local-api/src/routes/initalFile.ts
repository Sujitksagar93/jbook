export const initialFile =
  '[{"id":"1","type":"text","content":"\\nIt is an interactive coding environment. You can write Javascript, see it executed, and write comprehensive documentation using markdown.\\n- You can click any text cell to edit it.\\n- The code in each code editor is all joined together into one file. If you define a variable in Cell #1 you can refer it in any cell!\\n- You can show any React component, string, number or anything else by calling the `show` function. This is a function built into this environment.\\n- You can call show only one time for each cell. (only last one will take effect)\\n- You can reorder and delete cells.\\n- You can format the code by clicking on format.\\n- You can add new cells by hovering over the divider between each cell. \\nAll of your changes get saved to the file you opened bwnote with. So if you ran `npx bwnote serve test.js` all your changes will be saved to the `test.js` file. \\n    "},{"id":"2","type":"code","content":"import React, { useState } from \'react\';\\nimport \'bootstrap/dist/css/bootstrap.min.css\';\\nconst App = () => {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <>\\n      <div className=\\"container\\">\\n        <button\\n          className=\\"btn btn-primary m-2\\"\\n          onClick={() => {\\n            setCount(count + 1);\\n          }}\\n        >\\n          Increase\\n        </button>\\n        <button\\n          className=\\"btn btn-secondary\\"\\n          onClick={() => {\\n            setCount(count - 1);\\n          }}\\n        >\\n          Decrease\\n        </button>\\n        <h1 className=\\"m-2\\">Your count is {count}</h1>\\n      </div>\\n    </>\\n  );\\n};\\n\\nshow(<App />);"},{"id":"3","type":"code","content":"show(<App />);\\n// Accessing variables from previous cell\\n\\n/*show([1,2,3]) \\n\\n    const x = 2;\\n    show(x);\\n\\n    show can be used to preview anything.\\n But you can use show only once for each cell*/"}]';
